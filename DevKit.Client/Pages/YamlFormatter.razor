@page "/yaml-formatter"
@inject IJSRuntime JS
@using YamlDotNet.Serialization
@using YamlDotNet.Serialization.NamingConventions

<PageTitle>YAML Formatter & Validator</PageTitle>

<div class="min-h-screen flex flex-col items-center justify-center bg-gray-900 text-white p-6">
    <h1 class="text-4xl font-bold mb-6">📜 YAML Formatter & Validator</h1>
    <p class="text-gray-400 mb-6">Format and validate your YAML data easily.</p>

    <div class="w-full max-w-lg bg-gray-800 p-6 rounded-lg shadow-lg">
        <h2 class="text-lg font-semibold text-gray-300">📝 YAML Input</h2>
        <textarea @bind="YamlInput" class="w-full p-3 text-gray-900 rounded-md focus:ring focus:ring-blue-500"
                  rows="6" placeholder="Paste your YAML here..."></textarea>

        <button @onclick="FormatYaml" class="w-full mt-4 py-3 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold transition">
            Format YAML
        </button>

        @if (!string.IsNullOrEmpty(YamlError))
        {
            <p class="mt-4 text-red-400 text-sm font-semibold">⚠️ @YamlError</p>
        }

        @if (!string.IsNullOrEmpty(YamlFormatted))
        {
            <div class="mt-6 bg-gray-700 p-4 rounded-lg">
                <h2 class="text-lg font-semibold text-gray-300">✅ Formatted YAML</h2>
                <textarea readonly class="w-full p-3 text-gray-900 rounded-md" rows="6">@YamlFormatted</textarea>

                <button @onclick="CopyFormattedYaml" class="w-full mt-4 px-4 py-2 bg-green-600 hover:bg-green-700 rounded-lg transition">
                    📋 Copy YAML
                </button>
            </div>
        }
    </div>
</div>

@code {
    private string YamlInput { get; set; } = string.Empty;
    private string YamlFormatted { get; set; } = string.Empty;
    private string YamlError { get; set; } = string.Empty;

    private void FormatYaml()
    {
        YamlError = string.Empty;
        YamlFormatted = string.Empty;

        if (string.IsNullOrWhiteSpace(YamlInput))
        {
            YamlError = "Please enter valid YAML.";
            return;
        }

        try
        {
            var deserializer = new DeserializerBuilder()
                .WithNamingConvention(CamelCaseNamingConvention.Instance)
                .Build();

            var serializer = new SerializerBuilder()
                .WithNamingConvention(CamelCaseNamingConvention.Instance)
                .ConfigureDefaultValuesHandling(DefaultValuesHandling.OmitDefaults)
                .Build();

            var yamlObject = deserializer.Deserialize<object>(YamlInput);
            YamlFormatted = serializer.Serialize(yamlObject);
        }
        catch (Exception ex)
        {
            YamlError = "Invalid YAML syntax!";
            Console.WriteLine($"[YAML Error] {ex.Message}");
        }
    }

    private async Task CopyFormattedYaml()
    {
        if (!string.IsNullOrEmpty(YamlFormatted))
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", YamlFormatted);
        }
    }
}
